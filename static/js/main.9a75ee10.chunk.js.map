{"version":3,"sources":["components/TableRow.js","components/TableCell.js","components/BorderlessTableCell.js","components/TableRecordForm.js","components/TableNewRecordForm.js","components/TableEditRecordForm.js","components/TableRecord.js","components/TableRecords.js","components/TableView.js","components/DatabaseView.js","helpers/generateUUID.js","models/Record.js","models/Table.js","models/Database.js","helpers/setupDatabase.js","components/AdminView.js","components/GuestView.js","App.js","serviceWorker.js","index.js"],"names":["TableRow","styled","div","_templateObject","TableCell","TableCell_templateObject","BorderlessTableCell","BorderlessTableCell_templateObject","CancelAction","_ref","onClick","react_default","a","createElement","components_BorderlessTableCell","TableRecordForm","observer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","setRecordID","_ref2","target","props","recordDraft","setID","value","setRecordAttribute","_ref3","name","setAttribute","console","log","attributes","inherits","createClass","key","_this2","_this$props","columns","submitLabel","onSubmit","onCancel","id","components_TableRow","as","components_TableCell","onChange","disabled","map","column","type","TableRecordForm_CancelAction","Component","TableNewRecordForm","saveRecord","event","preventDefault","table","state","addRecord","persist","clearForm","newRecord","setState","components_TableRecordForm","TableEditRecordForm","resetRecord","afterEditRecord","updateRecord","record","update","copy","TableRecord","enterEditMode","editMode","exitEditMode","timestamp","components_TableEditRecordForm","destroy","TableRecords","records","components_TableRecord","TableLayout","TableView_templateObject","TableHead","_templateObject2","TableView","fetchRecords","components_TableRecords","components_TableNewRecordForm","DatabaseView","database","match","matchURL","url","replace","react","tables","react_router_dom","to","react_router","exact","path","render","components_TableView","generateUUID","c","crypto","getRandomValues","Uint8Array","toString","Record","types","model","frozen","string","maybeNull","views","self","deleteURL","getParentOfType","Table","writeURL","getSnapshot","attributeString","JSON","stringify","actions","create","fetch","method","then","response","alert","removeRecord","assign","defineProperty","googleID","array","readURL","Database","push","createRecord","_query","fetchRecordsSuccess","fetchRecordsError","error","forEach","query","Promise","resolve","reject","sheetrock","reset","callback","options","rows","shift","row","cellsArray","parse","sheetID","formID","formFields","createTable","_queryParams","formURL","buildUrl","queryParams","setupDatabase","config","objectSpread","AdminView","components_DatabaseView","adminKey","params","isAdmin","guestConfig","GuestView","App","basename","style","padding","components_AdminView","components_GuestView","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a75ee10.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst TableRow = styled.div`\n  display: table-row;\n`\n\nexport default TableRow\n","import styled from 'styled-components'\n\nconst TableCell = styled.div`\n  display: inline-block;\n  padding: 8px;\n  display: table-cell;\n  border: 1px solid #d2d2d2;\n  border-top-width: 0px;\n\n  &:not(:first-of-type) {\n    border-left-width: 0px;\n  }\n`\nexport default TableCell\n","import styled from 'styled-components'\n\nimport TableCell from './TableCell'\n\nconst BorderlessTableCell = styled(TableCell)`\n  border: none;\n`\nexport default BorderlessTableCell\n","import React, { Component } from 'react'\nimport { observer } from \"mobx-react\"\n\nimport BorderlessTableCell from './BorderlessTableCell'\nimport TableRow from './TableRow'\nimport TableCell from './TableCell'\n\nconst CancelAction = ({ onClick }) => (\n  <BorderlessTableCell>\n    <button onClick={onClick}>\n      Cancel\n    </button>\n  </BorderlessTableCell>\n)\n\nconst TableRecordForm = observer(\n  class TableRecordForm extends Component {\n    setRecordID = ({ target }) => {\n      const { recordDraft } = this.props\n\n      recordDraft.setID(target.value)\n    }\n\n    setRecordAttribute = ({ target }) => {\n      const { name, value } = target\n      const { recordDraft } = this.props\n\n      recordDraft.setAttribute(name, value)\n\n      console.log(recordDraft.attributes)\n    }\n\n    render() {\n      const { recordDraft, columns,\n              submitLabel, onSubmit, onCancel } = this.props\n      const { id, attributes } = recordDraft\n\n      return (\n        <TableRow as=\"form\" onSubmit={onSubmit}>\n          <TableCell>\n            <input name='id' value={id} onChange={this.setRecordID} disabled={true}/>\n          </TableCell>\n          {columns.map(column => (\n            <TableCell key={column}>\n              <input name={column} value={attributes[column]} onChange={this.setRecordAttribute} />\n            </TableCell>\n          ))}\n          <TableCell>\n            &mdash;\n          </TableCell>\n          <BorderlessTableCell>\n            <button type='submit'>\n              {submitLabel}\n            </button>\n          </BorderlessTableCell>\n          {onCancel ? <CancelAction onClick={onCancel} /> : null}\n        </TableRow>\n      )\n    }\n  }\n)\n\nexport default TableRecordForm\n","import React, { Component } from 'react'\nimport { observer } from \"mobx-react\"\n\nimport TableRecordForm from './TableRecordForm'\n\nconst TableNewRecordForm = observer(\n  class TableNewRecordForm extends Component {\n    constructor(props) {\n      super(props)\n\n      this.state = { recordDraft: props.table.newRecord() }\n    }\n\n    saveRecord = event => {\n      event.preventDefault()\n\n      const { table } = this.props\n      const { recordDraft } = this.state\n\n      if(!recordDraft.id)\n        return\n\n      table.addRecord(recordDraft)\n\n      recordDraft.persist()\n\n      this.clearForm()\n    }\n\n    clearForm() {\n      const { table } = this.props\n\n      this.setState({\n        recordDraft: table.newRecord()\n      })\n    }\n\n    render() {\n      const { columns } = this.props\n      const { recordDraft } = this.state\n\n      return (\n        <TableRecordForm\n          recordDraft={recordDraft}\n          columns={columns}\n          submitLabel='Create'\n          onSubmit={this.saveRecord}\n          />\n      )\n    }\n  }\n)\n\nexport default TableNewRecordForm\n","import React, { Component } from 'react'\n\nimport TableRecordForm from './TableRecordForm'\n\nclass TableEditRecordForm extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { recordDraft: props.record.copy() }\n  }\n\n  resetRecord = event => {\n    event.preventDefault()\n\n    this.props.afterEditRecord()\n  }\n\n  updateRecord = event => {\n    event.preventDefault()\n\n    const { recordDraft } = this.state\n    const { record, afterEditRecord } = this.props\n\n    record.update(recordDraft.attributes)\n\n    afterEditRecord()\n  }\n\n  render() {\n    const { columns } = this.props\n    const { recordDraft } = this.state\n\n    return (\n      <TableRecordForm\n        recordDraft={recordDraft}\n        columns={columns}\n        submitLabel='Update'\n        onSubmit={this.updateRecord}\n        onCancel={this.resetRecord}\n        />\n    )\n  }\n}\n\nexport default TableEditRecordForm\n","import React, { Component } from 'react'\nimport { observer } from \"mobx-react\"\n\nimport BorderlessTableCell from './BorderlessTableCell'\nimport TableEditRecordForm from './TableEditRecordForm'\nimport TableRow from './TableRow'\nimport TableCell from './TableCell'\n\nconst TableRecord = observer(\n  class TableRecord extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { editMode: false };\n    }\n\n    enterEditMode = () => {\n      this.setState({ editMode: true })\n    }\n\n    exitEditMode = () => {\n      this.setState({ editMode: false })\n    }\n\n    editMode() {\n      return this.state.editMode\n    }\n\n    render() {\n      const { record, columns } = this.props\n      const { id, attributes, timestamp } = record\n\n      if(this.editMode())\n        return <TableEditRecordForm\n                  record={record}\n                  columns={columns}\n                  afterEditRecord={this.exitEditMode} />\n\n      return (\n        <TableRow>\n          <TableCell>\n            {id}\n          </TableCell>\n          {columns.map(column => (\n            <TableCell key={column}>\n              {attributes[column]}\n            </TableCell>\n          ))}\n          <TableCell>\n            {timestamp}\n          </TableCell>\n          <BorderlessTableCell>\n            <button onClick={this.enterEditMode}>Edit</button>\n          </BorderlessTableCell>\n          <BorderlessTableCell>\n            <button onClick={record.destroy}>Delete</button>\n          </BorderlessTableCell>\n        </TableRow>\n      )\n    }\n  }\n)\n\nexport default TableRecord\n","import React from 'react'\nimport { observer } from \"mobx-react\"\n\nimport TableRecord from './TableRecord'\n\nconst TableRecords = observer(({ records, columns }) => (\n    records.map(record => (\n      <TableRecord key={record.id} record={record} columns={columns} />\n    ))\n  )\n)\n\nexport default TableRecords\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { observer } from \"mobx-react\"\n\nimport TableRow from './TableRow'\nimport TableCell from './TableCell'\nimport TableNewRecordForm from './TableNewRecordForm'\nimport TableRecords from './TableRecords'\n\nconst TableLayout = styled.div`\n  display: table;\n`\n\nconst TableHead = styled(TableRow)`\n  background: black;\n  color: white;\n\n  div {\n    font-weight: bold;\n    border-color: black;\n    border-top-width: 1px;\n\n    &:not(:last-of-type) {\n      border-right-color: white;\n    }\n  }\n`\n\nconst TableView = observer(\n  class TableView extends Component {\n    componentDidMount() {\n      this.props.table.fetchRecords()\n    }\n\n    render() {\n      const { table } = this.props\n      const { records, columns } = table\n\n      return (\n        <TableLayout>\n          <TableHead>\n            <TableCell>\n              ID\n            </TableCell>\n            {columns.map(column => (\n              <TableCell key={column}>\n                {column}\n              </TableCell>\n            ))}\n            <TableCell>\n              Timestamp\n            </TableCell>\n          </TableHead>\n          <TableRecords records={records} columns={columns} />\n          <TableNewRecordForm table={table} columns={columns} />\n        </TableLayout>\n      )\n    }\n  }\n)\n\nexport default TableView\n","import React, { Component, Fragment } from 'react'\nimport { Route, Link, Redirect } from \"react-router-dom\"\n\nimport TableView from './TableView.js';\n\nclass DatabaseView extends Component {\n  render() {\n    const { database, match } = this.props\n\n    // Remove trailing slash\n    // See: https://github.com/ReactTraining/react-router/issues/4841#issuecomment-507400321\n    const matchURL = match.url.replace(/\\/+$/, '')\n\n    return (\n      <Fragment>\n        <strong>Tables</strong>\n        <ul>\n          {database.tables.map(table => (\n            <li key={table.name}>\n              <Link to={`${matchURL}/${table.name}`}>\n                {table.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n        <hr />\n        {database.tables.map(table => (\n          <Route exact path={`${matchURL}/${table.name}`} render={() => <TableView table={table} />} />\n        ))}\n        <Route\n          exact\n          path={match.url}\n          render={() => <Redirect to={`${matchURL}/${database.tables[0].name}`} />} />\n\n      </Fragment>\n    )\n  }\n}\n\nexport default DatabaseView\n","// Generate a UUID: https://stackoverflow.com/a/2117523/6451879\n\nconst generateUUID = () => {\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n    (((c ^ crypto.getRandomValues(new Uint8Array(1))[0]) & 15) >> c / 4).toString(16)\n  )\n}\n\nexport default generateUUID\n","import { types, getParentOfType, getSnapshot } from \"mobx-state-tree\"\n\nimport Table from './Table'\n\nconst Record = types\n  .model({\n    id: types.frozen(types.string),\n    attributes: types.frozen(),\n    timestamp: types.maybeNull(types.string)\n  })\n  .views(self => ({\n    // Return the URL for deleting the record from the table\n    get deleteURL() {\n      return getParentOfType(self, Table).deleteURL(self)\n    },\n    // Return the URL for writing the record to the table\n    get writeURL() {\n      console.log(getSnapshot(self))\n\n      return getParentOfType(self, Table).writeURL(self)\n    },\n    // JSON-string of attributes for writing to database\n    get attributeString() {\n      console.log(JSON.stringify(self.attributes))\n      return JSON.stringify(self.attributes)\n    }\n  }))\n  .actions(self => ({\n    // Return a copy of the record\n    copy() {\n      return Record.create(getSnapshot(self))\n    },\n    // Delete the record\n    destroy() {\n      // TODO: Needs error handling!\n      fetch(self.deleteURL, { method: 'post' })\n        .then(response => alert('Record deleted'));\n\n      getParentOfType(self, Table).removeRecord(self)\n\n      return true\n    },\n    // Persist record with current attributes\n    persist() {\n      // TODO: Needs error handling!\n      fetch(self.writeURL, { method: 'post' })\n        .then(response => alert('Record saved'));\n\n      self.timestamp = null\n\n      return true\n    },\n    // Assigns attributes & persists record\n    update(attributes) {\n      console.log(attributes)\n\n      self.attributes = attributes\n      self.persist()\n    },\n    // Set ID\n    setID(id) {\n      self.id = id\n    },\n    // Set attribute\n    setAttribute(name, value) {\n      self.attributes = Object.assign({}, self.attributes, { [name]: value })\n    },\n  }))\n\nexport default Record\n","import sheetrock from 'sheetrock'\nimport { types, getParentOfType, destroy } from \"mobx-state-tree\"\n\nimport generateUUID from '../helpers/generateUUID'\nimport Record from './Record'\nimport Database from './Database'\n\nconst Table = types\n  .model({\n    name: types.string,\n    googleID: types.string,\n    records: types.array(Record),\n    columns: types.array(types.string)\n  })\n  .views(self => ({\n    get readURL() {\n      return `${getParentOfType(self, Database).readURL}#gid=${self.googleID}`\n    }\n  }))\n  .actions(self => ({\n    // adds a record\n    addRecord(record) {\n      self.records.push(record)\n    },\n    createRecord(attributes) {\n      self.records.push(attributes)\n\n      return self.records[self.records.length-1]\n    },\n    // Return the URL for deleting data\n    deleteURL({ id }) {\n      return getParentOfType(self, Database).writeURL({\n        table: self.name,\n        id: id,\n        attributes: 'delete'\n      })\n    },\n    fetchRecords() {\n      self.records = []\n      self._query('SELECT *').then(\n        // when promise resolves invoke the appropiate action\n        // (note that there is no need to bind here)\n        self.fetchRecordsSuccess,\n        self.fetchRecordsError\n      )\n    },\n    fetchRecordsSuccess(records) {\n      self.state = \"done\"\n      self.records = records\n    },\n    fetchRecordsError(error) {\n      console.error(\"Failed to fetch records\", error)\n      self.state = \"error\"\n    },\n    // instantiate a new record (but do not persist)\n    newRecord() {\n      let attributes = {}\n\n      self.columns.forEach(column => {\n        attributes[column] = ''\n      })\n\n      return Record.create({\n        id: generateUUID(),\n        attributes: attributes\n      })\n    },\n    // remove a record\n    removeRecord(record) {\n      destroy(record)\n    },\n    // Return the URL for writing data\n    writeURL({ id, attributeString }) {\n      return getParentOfType(self, Database).writeURL({\n        table: self.name,\n        id: id,\n        attributes: attributeString\n      })\n    },\n    // Run a query against the records in this table\n    _query(query) {\n      return new Promise((resolve, reject) => {\n        sheetrock({\n          query: query,\n          reset: true,\n          url: self.readURL,\n          callback: (error, options, response) => {\n            if (error) {\n              reject(error)\n            } else {\n              const rows = response.rows\n\n              // remove header\n              rows.shift()\n\n              // translate into records\n              const records = rows.map(row => (\n                Record.create({\n                  id: row.cellsArray[0],\n                  attributes: JSON.parse(row.cellsArray[1]),\n                  timestamp: row.cellsArray[2],\n                })\n              ))\n\n              // return records\n              resolve(records)\n            }\n          }\n        })\n      })\n    }\n  }))\n\nexport default Table\n","import buildUrl from 'build-url'\nimport { types } from \"mobx-state-tree\"\n\nimport Table from './Table'\n\nconst Database = types\n  .model({\n    sheetID: types.string,\n    formID: types.string,\n    formFields: types.frozen(),\n    tables: types.array(Table)\n  })\n  .views(self => ({\n    get readURL() {\n      return `https://docs.google.com/spreadsheets/d/${self.sheetID}`\n    }\n  }))\n  .actions(self => ({\n    createTable(attributes) {\n      self.tables.push(attributes)\n\n      return self.tables[self.tables.length-1]\n    },\n    // Return the proxied URL for writing data to this table\n    // Because Google forms does not allow CORS, we must proxy the request\n    writeURL({ table, id, attributes }) {\n      const formURL = buildUrl('https://docs.google.com', {\n        path: `forms/d/e/${self.formID}/formResponse`,\n        queryParams: {\n          [self.formFields.table]: table,\n          [self.formFields.id]: id,\n          [self.formFields.attributes]: attributes\n        }\n      })\n\n      const proxiedFormUrl = buildUrl('https://bypasscors.herokuapp.com', {\n        path: 'api',\n        queryParams: {\n          url: formURL\n        }\n      })\n\n      return proxiedFormUrl\n    }\n  }))\n\nexport default Database\n","import Database from '../models/Database'\n\nconst setupDatabase = (config) => {\n  const database = Database.create({\n    sheetID: '1sLhgLZfHKkCcZ3SbVy-LIh_o1rQg3k62enEAND0hD9Q',\n    ...config\n  })\n\n  database.createTable({\n    name: 'plants',\n    googleID: '0',\n    columns: ['identifier', 'alt', 'name', 'note']\n  })\n\n  database.createTable({\n    name: 'relationships',\n    googleID: '1567813754',\n    columns: ['plant1', 'plant2', 'likes', 'note']\n  })\n\n  return database\n}\n\nexport default setupDatabase\n","import React from 'react'\n\nimport DatabaseView from './DatabaseView'\nimport setupDatabase from '../helpers/setupDatabase'\n\nconst getAdminConfig = (adminKey) => {\n  return {\n    formID: adminKey,\n    formFields: {\n      table: 'entry.1190729126',\n      id: 'entry.149192443',\n      attributes: 'entry.538827119'\n    }\n  }\n}\n\nconst AdminView = props => (\n  <DatabaseView\n    database={setupDatabase(getAdminConfig(props.match.params.key))}\n    isAdmin={true}\n    adminKey={props.match.params.key}\n    {...props} />\n)\n\nexport default AdminView\n","import React from 'react'\n\nimport DatabaseView from './DatabaseView'\nimport setupDatabase from '../helpers/setupDatabase'\n\nconst guestConfig = {\n  formID: 'abc',\n  formFields: {\n    table: 'entry.1190729126',\n    id: 'entry.149192443',\n    attributes: 'entry.538827119'\n  }\n}\n\nconst GuestView = props => (\n  <DatabaseView\n    database={setupDatabase(guestConfig)}\n    {...props} />\n)\n\nexport default GuestView\n","import React from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\"\nimport './App.css';\n\nimport AdminView from './components/AdminView.js';\nimport GuestView from './components/GuestView.js';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div style={{padding: 20}}>\n        <Switch>\n          <Route\n            path='/admin/:key/'\n            render={props => <AdminView {...props} />} />\n          <Route\n            render={props => <GuestView {...props} />} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}