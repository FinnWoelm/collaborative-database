{"version":3,"sources":["components/TableCell.js","components/BorderlessTableCell.js","components/TableRow.js","components/SuggestionsPage.js","components/TableRecordForm.js","components/TableNewRecordForm.js","components/TableEditRecordForm.js","components/TableRecord.js","components/TableRecords.js","components/TableView.js","components/DatabaseView.js","helpers/generateUUID.js","models/Record.js","models/Table.js","models/Database.js","helpers/setupDatabase.js","components/AdminView.js","components/GuestView.js","App.js","serviceWorker.js","index.js"],"names":["TableCell","styled","div","_templateObject","BorderlessTableCell","BorderlessTableCell_templateObject","TableRow","TableRow_templateObject","TableLayout","SuggestionsPage_templateObject","TableHead","_templateObject2","SuggestionsPage","observer","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","acceptSuggestion","suggestion","_suggestion$attribute","attributes","idToChange","id","tableToChange","table","changes","props","database","tables","find","name","record","records","createRecord","destroy","update","accepted","inherits","createClass","key","value","forEach","fetchRecords","_this2","suggestions","columns","react_default","a","createElement","components_TableCell","map","column","components_TableRow","JSON","stringify","timestamp","components_BorderlessTableCell","onClick","Component","CancelAction","_ref","TableRecordForm","setRecordID","_ref2","target","recordDraft","setID","setRecordAttribute","_ref3","setAttribute","console","log","_this$props","submitLabel","onSubmit","onCancel","as","onChange","disabled","undefined","type","TableRecordForm_CancelAction","TableNewRecordForm","saveRecord","event","preventDefault","onCreateRecord","state","clearForm","newRecord","setState","_this$props2","createLabel","components_TableRecordForm","TableEditRecordForm","resetRecord","afterEditRecord","updateRecord","onUpdateRecord","afterUpdateRecord","copy","updateLabel","TableRecord","enterEditMode","editMode","exitEditMode","destroyRecord","onDestroyRecord","objectSpread","editLabel","destroyLabel","components_TableEditRecordForm","TableRecords","otherProps","objectWithoutProperties","components_TableRecord","assign","TableView_templateObject","TableView_templateObject2","TableView","TableView_TableLayout","TableView_TableHead","components_TableRecords","components_TableNewRecordForm","DatabaseView","match","matchURL","url","replace","filter","react","react_router_dom","to","react_router","exact","path","render","components_TableView","generateUUID","c","crypto","getRandomValues","Uint8Array","toString","Record","types","model","frozen","string","maybeNull","views","self","deleteURL","getParentOfType","Table","writeURL","getSnapshot","attributeString","actions","create","fetch","method","then","response","alert","removeRecord","persist","text","data","defineProperty","googleID","array","readURL","Database","addRecord","push","_query","fetchRecordsSuccess","fetchRecordsError","error","query","Promise","resolve","reject","sheetrock","reset","callback","options","rows","shift","row","cellsArray","parse","sheetID","formID","formFields","createTable","_queryParams","buildUrl","queryParams","setupDatabase","config","getAdminConfig","adminKey","AdminView","params","components_DatabaseView","isAdmin","components_SuggestionsPage","suggestionTable","guestConfig","GuestView","App","basename","style","padding","components_AdminView","components_GuestView","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f397027c.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst TableCell = styled.div`\n  display: inline-block;\n  padding: 8px;\n  display: table-cell;\n  border: 1px solid #d2d2d2;\n  border-top-width: 0px;\n\n  &:not(:first-of-type) {\n    border-left-width: 0px;\n  }\n`\nexport default TableCell\n","import styled from 'styled-components'\n\nimport TableCell from './TableCell'\n\nconst BorderlessTableCell = styled(TableCell)`\n  border: none;\n`\nexport default BorderlessTableCell\n","import styled from 'styled-components'\n\nconst TableRow = styled.div`\n  display: table-row;\n`\n\nexport default TableRow\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { observer } from \"mobx-react\"\n\nimport BorderlessTableCell from './BorderlessTableCell'\nimport TableRow from './TableRow'\nimport TableCell from './TableCell'\n\nconst TableLayout = styled.div`\n  display: table;\n`\n\nconst TableHead = styled(TableRow)`\n  background: black;\n  color: white;\n\n  div {\n    font-weight: bold;\n    border-color: black;\n    border-top-width: 1px;\n\n    &:not(:last-of-type) {\n      border-right-color: white;\n    }\n  }\n`\n\nconst SuggestionsPage = observer(\n  class SuggestionsPage extends Component {\n    componentDidMount() {\n      this.props.database.tables.forEach(table => table.fetchRecords())\n    }\n\n    acceptSuggestion = (suggestion) => {\n      const { id: idToChange, table: tableToChange, changes } = suggestion.attributes\n\n      // apply suggestion\n      const table = this.props.database.tables.find(table => table.name === tableToChange)\n      // find record or create new one\n      let record = table.records.find(record => record.id === idToChange) ||\n                   table.createRecord({ id: idToChange })\n      // delete or update record\n      if(changes === 'delete')\n        record.destroy()\n      else\n        record.update(changes)\n\n      suggestion.update({ accepted: true })\n    }\n\n    render() {\n      const { table } = this.props\n      const suggestions = table.records\n      const { columns } = table\n\n      return (\n        <TableLayout>\n          <TableHead>\n            <TableCell>\n              ID\n            </TableCell>\n            {columns.map(column => (\n              <TableCell key={column}>\n                {column}\n              </TableCell>\n            ))}\n            <TableCell>\n              Timestamp\n            </TableCell>\n          </TableHead>\n          {suggestions.map(suggestion => (\n            <TableRow key={suggestion.id}>\n              <TableCell>\n                {suggestion.id}\n              </TableCell>\n              {columns.map(column => (\n                <TableCell key={column}>\n                  {JSON.stringify(suggestion.attributes[column])}\n                </TableCell>\n              ))}\n              <TableCell>\n                {suggestion.timestamp}\n              </TableCell>\n              {\n                suggestion.attributes['accepted'] ? null : (\n                  <BorderlessTableCell>\n                    <button onClick={() => this.acceptSuggestion(suggestion)}>\n                      Accept Suggestion\n                    </button>\n                  </BorderlessTableCell>\n                )\n              }\n            </TableRow>\n          ))}\n        </TableLayout>\n      )\n    }\n  }\n)\n\nexport default SuggestionsPage\n","import React, { Component } from 'react'\nimport { observer } from \"mobx-react\"\n\nimport BorderlessTableCell from './BorderlessTableCell'\nimport TableRow from './TableRow'\nimport TableCell from './TableCell'\n\nconst CancelAction = ({ onClick }) => (\n  <BorderlessTableCell>\n    <button onClick={onClick}>\n      Cancel\n    </button>\n  </BorderlessTableCell>\n)\n\nconst TableRecordForm = observer(\n  class TableRecordForm extends Component {\n    setRecordID = ({ target }) => {\n      const { recordDraft } = this.props\n\n      recordDraft.setID(target.value)\n    }\n\n    setRecordAttribute = ({ target }) => {\n      const { name, value } = target\n      const { recordDraft } = this.props\n\n      recordDraft.setAttribute(name, value)\n\n      console.log(recordDraft.attributes)\n    }\n\n    render() {\n      const { recordDraft, columns,\n              submitLabel, onSubmit, onCancel } = this.props\n      const { id, attributes } = recordDraft\n\n      return (\n        <TableRow as=\"form\" onSubmit={onSubmit}>\n          <TableCell>\n            <input name='id' value={id} onChange={this.setRecordID} disabled={true}/>\n          </TableCell>\n          {columns.map(column => (\n            <TableCell key={column}>\n              <input\n                name={column}\n                // Avoid: \"A component is changing an uncontrolled input of type\n                // undefined to be controlled. Input elements should not switch\n                // from uncontrolled to controlled (or vice versa).\n                // See: https://stackoverflow.com/a/50722189/6451879\n                value={attributes[column] === undefined ? '' : attributes[column]}\n                onChange={this.setRecordAttribute} />\n            </TableCell>\n          ))}\n          <TableCell>\n            &mdash;\n          </TableCell>\n          <BorderlessTableCell>\n            <button type='submit'>\n              {submitLabel}\n            </button>\n          </BorderlessTableCell>\n          {onCancel ? <CancelAction onClick={onCancel} /> : null}\n        </TableRow>\n      )\n    }\n  }\n)\n\nexport default TableRecordForm\n","import React, { Component } from 'react'\nimport { observer } from \"mobx-react\"\n\nimport TableRecordForm from './TableRecordForm'\n\nconst TableNewRecordForm = observer(\n  class TableNewRecordForm extends Component {\n    constructor(props) {\n      super(props)\n\n      this.state = { recordDraft: props.table.newRecord() }\n    }\n\n    saveRecord = event => {\n      event.preventDefault()\n\n      const { table, onCreateRecord } = this.props\n      const { recordDraft } = this.state\n\n      let success = onCreateRecord({ table, recordDraft })\n\n      if(success)\n        this.clearForm()\n    }\n\n    clearForm() {\n      const { table } = this.props\n\n      this.setState({\n        recordDraft: table.newRecord()\n      })\n    }\n\n    render() {\n      const { columns, createLabel } = this.props\n      const { recordDraft } = this.state\n\n      return (\n        <TableRecordForm\n          recordDraft={recordDraft}\n          columns={columns}\n          submitLabel={createLabel}\n          onSubmit={this.saveRecord}\n          />\n      )\n    }\n  }\n)\n\nexport default TableNewRecordForm\n","import React, { Component } from 'react'\n\nimport TableRecordForm from './TableRecordForm'\n\nclass TableEditRecordForm extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { recordDraft: props.record.copy() }\n  }\n\n  resetRecord = event => {\n    event.preventDefault()\n\n    this.props.afterEditRecord()\n  }\n\n  updateRecord = event => {\n    event.preventDefault()\n\n    const { recordDraft } = this.state\n    const { record, onUpdateRecord, afterUpdateRecord } = this.props\n\n    let success = onUpdateRecord({ record, recordDraft })\n\n    if(success)\n      afterUpdateRecord()\n  }\n\n  render() {\n    const { columns, updateLabel } = this.props\n    const { recordDraft } = this.state\n\n    return (\n      <TableRecordForm\n        recordDraft={recordDraft}\n        columns={columns}\n        submitLabel={updateLabel}\n        onSubmit={this.updateRecord}\n        onCancel={this.resetRecord}\n        />\n    )\n  }\n}\n\nexport default TableEditRecordForm\n","import React, { Component } from 'react'\nimport { observer } from \"mobx-react\"\n\nimport BorderlessTableCell from './BorderlessTableCell'\nimport TableEditRecordForm from './TableEditRecordForm'\nimport TableRow from './TableRow'\nimport TableCell from './TableCell'\n\nconst TableRecord = observer(\n  class TableRecord extends Component {\n    constructor(props) {\n      super(props);\n      this.state = { editMode: false };\n    }\n\n    enterEditMode = () => {\n      this.setState({ editMode: true })\n    }\n\n    exitEditMode = () => {\n      this.setState({ editMode: false })\n    }\n\n    destroyRecord = () => {\n      const { record, onDestroyRecord } = this.props\n\n      onDestroyRecord({ ...{ record } })\n    }\n\n    editMode() {\n      return this.state.editMode\n    }\n\n    render() {\n      const { record, columns,\n              onUpdateRecord,\n              editLabel, updateLabel, destroyLabel} = this.props\n      const { id, attributes, timestamp } = record\n\n      if(this.editMode())\n        return <TableEditRecordForm\n                  record={record}\n                  columns={columns}\n                  updateLabel={updateLabel}\n                  onUpdateRecord={onUpdateRecord}\n                  afterUpdateRecord={this.exitEditMode} />\n\n      return (\n        <TableRow>\n          <TableCell>\n            {id}\n          </TableCell>\n          {columns.map(column => (\n            <TableCell key={column}>\n              {attributes[column]}\n            </TableCell>\n          ))}\n          <TableCell>\n            {timestamp}\n          </TableCell>\n          <BorderlessTableCell>\n            <button onClick={this.enterEditMode}>\n              {editLabel}\n            </button>\n          </BorderlessTableCell>\n          <BorderlessTableCell>\n            <button onClick={this.destroyRecord}>\n              {destroyLabel}\n            </button>\n          </BorderlessTableCell>\n        </TableRow>\n      )\n    }\n  }\n)\n\nexport default TableRecord\n","import React from 'react'\nimport { observer } from \"mobx-react\"\n\nimport TableRecord from './TableRecord'\n\nconst TableRecords = observer(({ records, ...otherProps }) => (\n    records.map(record => (\n      <TableRecord key={record.id} record={record} {...otherProps} />\n    ))\n  )\n)\n\nexport default TableRecords\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { observer } from \"mobx-react\"\n\nimport TableRow from './TableRow'\nimport TableCell from './TableCell'\nimport TableNewRecordForm from './TableNewRecordForm'\nimport TableRecords from './TableRecords'\n\nconst TableLayout = styled.div`\n  display: table;\n`\n\nconst TableHead = styled(TableRow)`\n  background: black;\n  color: white;\n\n  div {\n    font-weight: bold;\n    border-color: black;\n    border-top-width: 1px;\n\n    &:not(:last-of-type) {\n      border-right-color: white;\n    }\n  }\n`\n\nconst TableView = observer(\n  class TableView extends Component {\n    componentDidMount() {\n      this.props.table.fetchRecords()\n    }\n\n    render() {\n      const { table,\n              onCreateRecord, onUpdateRecord, onDestroyRecord,\n              createLabel, editLabel, updateLabel, destroyLabel } = this.props\n      const { records, columns } = table\n\n      return (\n        <TableLayout>\n          <TableHead>\n            <TableCell>\n              ID\n            </TableCell>\n            {columns.map(column => (\n              <TableCell key={column}>\n                {column}\n              </TableCell>\n            ))}\n            <TableCell>\n              Timestamp\n            </TableCell>\n          </TableHead>\n          <TableRecords\n            records={records}\n            columns={columns}\n            editLabel={editLabel}\n            updateLabel={updateLabel}\n            onUpdateRecord={onUpdateRecord}\n            onDestroyRecord={onDestroyRecord}\n            destroyLabel={destroyLabel} />\n          <TableNewRecordForm\n            table={table}\n            columns={columns}\n            createLabel={createLabel}\n            onCreateRecord={onCreateRecord} />\n        </TableLayout>\n      )\n    }\n  }\n)\n\nexport default TableView\n","import React, { Component, Fragment } from 'react'\nimport { Route, Link, Redirect } from \"react-router-dom\"\n\nimport TableView from './TableView.js';\n\nclass DatabaseView extends Component {\n  render() {\n    const { database, match, ...otherProps } = this.props\n\n    // Remove trailing slash\n    // See: https://github.com/ReactTraining/react-router/issues/4841#issuecomment-507400321\n    const matchURL = match.url.replace(/\\/+$/, '')\n\n    const tables = database.tables.filter(table => table.name !== 'suggestions')\n\n    return (\n      <Fragment>\n        <strong>Tables</strong>\n        <ul>\n          {tables.map(table => (\n            <li key={table.name}>\n              <Link to={`${matchURL}/${table.name}`}>\n                {table.name}\n              </Link>\n            </li>\n          ))}\n        </ul>\n        <hr />\n        {tables.map(table => (\n          <Route\n            key={table.name}\n            exact\n            path={`${matchURL}/${table.name}`}\n            render={() => (\n              <TableView\n                table={table}\n                {...otherProps} />\n          )} />\n        ))}\n        <Route\n          exact\n          path={match.url}\n          render={() => <Redirect to={`${matchURL}/${tables[0].name}`} />} />\n\n      </Fragment>\n    )\n  }\n}\n\nexport default DatabaseView\n","// Generate a UUID: https://stackoverflow.com/a/2117523/6451879\n\nconst generateUUID = () => {\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n    (((c ^ crypto.getRandomValues(new Uint8Array(1))[0]) & 15) >> c / 4).toString(16)\n  )\n}\n\nexport default generateUUID\n","import { types, getParentOfType, getSnapshot } from \"mobx-state-tree\"\n\nimport Table from './Table'\n\nconst Record = types\n  .model({\n    id: types.frozen(types.string),\n    attributes: types.frozen(),\n    timestamp: types.maybeNull(types.string)\n  })\n  .views(self => ({\n    // Return the URL for deleting the record from the table\n    get deleteURL() {\n      return self.table.deleteURL(self)\n    },\n    get table() {\n      return getParentOfType(self, Table)\n    },\n    // Return the URL for writing the record to the table\n    get writeURL() {\n      console.log(getSnapshot(self))\n\n      return self.table.writeURL(self)\n    },\n    // JSON-string of attributes for writing to database\n    get attributeString() {\n      console.log(JSON.stringify(self.attributes))\n      return JSON.stringify(self.attributes)\n    }\n  }))\n  .actions(self => ({\n    // Return a copy of the record\n    copy() {\n      return Record.create(getSnapshot(self))\n    },\n    // Delete the record\n    destroy() {\n      // TODO: Needs error handling!\n      fetch(self.deleteURL, { method: 'post' })\n        .then(response => alert('Record deleted'));\n\n      self.table.removeRecord(self)\n\n      return true\n    },\n    // Persist record with current attributes\n    persist() {\n      // TODO: Needs error handling!\n      fetch(self.writeURL, { method: 'post' })\n        .then(response => {\n          alert('Saved')\n          response.text().then(data => console.log(data))\n        })\n\n      self.timestamp = null\n\n      return true\n    },\n    // Assigns attributes & persists record\n    update(attributes) {\n      console.log(attributes)\n\n      self.attributes = Object.assign({}, self.attributes, attributes)\n      self.persist()\n    },\n    // Set ID\n    setID(id) {\n      self.id = id\n    },\n    // Set attribute\n    setAttribute(name, value) {\n      self.attributes = Object.assign({}, self.attributes, { [name]: value })\n    },\n  }))\n\nexport default Record\n","import sheetrock from 'sheetrock'\nimport { types, getParentOfType, destroy } from \"mobx-state-tree\"\n\nimport generateUUID from '../helpers/generateUUID'\nimport Record from './Record'\nimport Database from './Database'\n\nconst Table = types\n  .model({\n    name: types.string,\n    googleID: types.string,\n    records: types.array(Record),\n    columns: types.array(types.string)\n  })\n  .views(self => ({\n    get readURL() {\n      return `${getParentOfType(self, Database).readURL}#gid=${self.googleID}`\n    }\n  }))\n  .actions(self => ({\n    // adds a record\n    addRecord(record) {\n      self.records.push(record)\n    },\n    createRecord(attributes) {\n      self.records.push(attributes)\n\n      return self.records[self.records.length-1]\n    },\n    // Return the URL for deleting data\n    deleteURL({ id }) {\n      return getParentOfType(self, Database).writeURL({\n        table: self.name,\n        id: id,\n        attributes: 'delete'\n      })\n    },\n    fetchRecords() {\n      self.records = []\n      self._query('SELECT *').then(\n        // when promise resolves invoke the appropiate action\n        // (note that there is no need to bind here)\n        self.fetchRecordsSuccess,\n        self.fetchRecordsError\n      )\n    },\n    fetchRecordsSuccess(records) {\n      self.state = \"done\"\n      self.records = records\n    },\n    fetchRecordsError(error) {\n      console.error(\"Failed to fetch records\", error)\n      self.state = \"error\"\n    },\n    // instantiate a new record (but do not persist)\n    newRecord() {\n      let attributes = {}\n\n      self.columns.forEach(column => {\n        attributes[column] = ''\n      })\n\n      return Record.create({\n        id: generateUUID(),\n        attributes: attributes\n      })\n    },\n    // remove a record\n    removeRecord(record) {\n      destroy(record)\n    },\n    // Return the URL for writing data\n    writeURL({ id, attributeString }) {\n      return getParentOfType(self, Database).writeURL({\n        table: self.name,\n        id: id,\n        attributes: attributeString\n      })\n    },\n    // Run a query against the records in this table\n    _query(query) {\n      return new Promise((resolve, reject) => {\n        sheetrock({\n          query: query,\n          reset: true,\n          url: self.readURL,\n          callback: (error, options, response) => {\n            if (error) {\n              reject(error)\n            } else {\n              const rows = response.rows\n\n              // remove header\n              rows.shift()\n\n              // translate into records\n              const records = rows.map(row => (\n                Record.create({\n                  id: row.cellsArray[0],\n                  attributes: JSON.parse(row.cellsArray[1]),\n                  timestamp: row.cellsArray[2],\n                })\n              ))\n\n              // return records\n              resolve(records)\n            }\n          }\n        })\n      })\n    }\n  }))\n\nexport default Table\n","import buildUrl from 'build-url'\nimport { types } from \"mobx-state-tree\"\n\nimport Table from './Table'\n\nconst Database = types\n  .model({\n    sheetID: types.string,\n    formID: types.string,\n    formFields: types.frozen(),\n    tables: types.array(Table)\n  })\n  .views(self => ({\n    get readURL() {\n      return `https://docs.google.com/spreadsheets/d/${self.sheetID}`\n    }\n  }))\n  .actions(self => ({\n    createTable(attributes) {\n      self.tables.push(attributes)\n\n      return self.tables[self.tables.length-1]\n    },\n    // Return the URL for writing data to this table\n    writeURL({ table, id, attributes }) {\n      const formURL = buildUrl('https://script.google.com/', {\n        path: `macros/s/AKfycbypjmWHNvoID5K5tyodKMzbagGSA3UzHPArgvtJrcpx-LsmVaw/exec`,\n        queryParams: {\n          [self.formFields.table]: table,\n          [self.formFields.id]: id,\n          [self.formFields.attributes]: attributes,\n          'adminKey': self.formID\n        }\n      })\n\n      return formURL\n    }\n  }))\n\nexport default Database\n","import Database from '../models/Database'\n\nconst setupDatabase = (config) => {\n  const database = Database.create({\n    sheetID: '1sLhgLZfHKkCcZ3SbVy-LIh_o1rQg3k62enEAND0hD9Q',\n    ...config\n  })\n\n  database.createTable({\n    name: 'plants',\n    googleID: '0',\n    columns: ['identifier', 'alt', 'name', 'note']\n  })\n\n  database.createTable({\n    name: 'relationships',\n    googleID: '1567813754',\n    columns: ['plant1', 'plant2', 'likes', 'note']\n  })\n\n  database.createTable({\n    name: 'suggestions',\n    googleID: '2121427503',\n    columns: ['table', 'id', 'changes', 'accepted']\n  })\n\n  return database\n}\n\nexport default setupDatabase\n","import React, { Component, Fragment } from 'react'\nimport { Link, Route } from \"react-router-dom\"\n\nimport SuggestionsPage from './SuggestionsPage'\nimport DatabaseView from './DatabaseView'\nimport setupDatabase from '../helpers/setupDatabase'\n\nconst getAdminConfig = (adminKey) => {\n  return {\n    formID: adminKey,\n    formFields: {\n      table: 'Table',\n      id: 'ID',\n      attributes: 'Attributes'\n    }\n  }\n}\n\nclass AdminView extends Component {\n  constructor(props) {\n    super(props)\n\n\n    this.state = { database: setupDatabase(getAdminConfig(this.adminKey())) }\n  }\n\n  onCreateRecord = ({ table, recordDraft }) => {\n    table.addRecord(recordDraft)\n\n    recordDraft.persist()\n\n    return true\n  }\n\n  onUpdateRecord = ({ record, recordDraft }) => {\n    record.update(recordDraft.attributes)\n\n    return true\n  }\n\n  onDestroyRecord = ({ record }) => {\n    record.destroy()\n\n    return true\n  }\n\n  adminKey() {\n    return this.props.match.params.key\n  }\n\n  suggestionTable() {\n    return this.state.database.tables.find(table => table.name === 'suggestions')\n  }\n\n  render() {\n    // Remove trailing slash\n    // See: https://github.com/ReactTraining/react-router/issues/4841#issuecomment-507400321\n    const matchURL = this.props.match.url.replace(/\\/+$/, '')\n\n    return (\n      <Fragment>\n        <Link to={`${matchURL}/suggestions`}>\n          Review suggestions\n        </Link>\n        <br/>\n        <br/>\n        <DatabaseView\n          database={this.state.database}\n          isAdmin={true}\n          adminKey={this.adminKey()}\n          createLabel='Create'\n          onCreateRecord={this.onCreateRecord}\n          editLabel='Edit'\n          updateLabel='Update'\n          onUpdateRecord={this.onUpdateRecord}\n          destroyLabel='Delete'\n          onDestroyRecord={this.onDestroyRecord}\n          {...this.props} />\n        <Route\n          path={`${matchURL}/suggestions`}\n          render={props => (\n            <SuggestionsPage\n              database={this.state.database}\n              table={this.suggestionTable()} />\n          )} />\n      </Fragment>\n    )\n  }\n}\n\nexport default AdminView\n","import React, { Component } from 'react'\n\nimport DatabaseView from './DatabaseView'\nimport setupDatabase from '../helpers/setupDatabase'\n\nconst guestConfig = {\n  formID: '',\n  formFields: {\n    table: 'Table',\n    id: 'ID',\n    attributes: 'Attributes'\n  }\n}\n\nclass GuestView extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { database: setupDatabase(guestConfig) }\n  }\n\n  suggestionTable() {\n    return this.state.database.tables.find(table => table.name === 'suggestions')\n  }\n\n  onCreateRecord = ({ table, recordDraft }) => {\n    const suggestion = this.suggestionTable().newRecord()\n\n    this.suggestionTable().addRecord(suggestion)\n\n    suggestion.update({\n      table: table.name,\n      id: recordDraft.id,\n      changes: recordDraft.attributes\n    })\n\n    return true\n  }\n\n  onUpdateRecord = ({ record, recordDraft }) => {\n    const suggestion = this.suggestionTable().newRecord()\n\n    this.suggestionTable().addRecord(suggestion)\n\n    suggestion.update({\n      table: record.table.name,\n      id: record.id,\n      changes: recordDraft.attributes\n    })\n\n    return true\n  }\n\n  onDestroyRecord = ({ record }) => {\n    const suggestion = this.suggestionTable().newRecord()\n\n    this.suggestionTable().addRecord(suggestion)\n\n    suggestion.update({\n      table: record.table.name,\n      id: record.id,\n      changes: 'delete'\n    })\n\n    return true\n  }\n\n  render() {\n    return (\n      <DatabaseView\n         database={this.state.database}\n         createLabel='Suggest Creation'\n         onCreateRecord={this.onCreateRecord}\n         editLabel='Suggest Edit'\n         updateLabel='Suggest Update'\n         onUpdateRecord={this.onUpdateRecord}\n         destroyLabel='Suggest Deletion'\n         onDestroyRecord={this.onDestroyRecord}\n         {...this.props} />\n     )\n  }\n}\n\nexport default GuestView\n","import React from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\"\nimport './App.css';\n\nimport AdminView from './components/AdminView.js';\nimport GuestView from './components/GuestView.js';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div style={{padding: 20}}>\n        <Switch>\n          <Route\n            path='/admin/:key/'\n            render={props => <AdminView {...props} />} />\n          <Route\n            render={props => <GuestView {...props} />} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}